---
import DefinitionList from '~components/DefinitionList.astro';
import DescriptionText from '~components/DescriptionText.astro';
import { getPageMetadata } from '~astro-utils/page-metadata.ts';
import { getWordsLengthUrl } from '~astro-utils/url-utils';
import {
  getLetterStats,
  getLetterTypeStats,
  getPatternStats,
  getSyllableStats,
} from '~astro-utils/word-stats-utils';
import Heading from '~components/Heading.astro';
import Layout from '~layouts/Layout.astro';
import { countSyllables, getConsonantCount, getVowelCount } from '~utils/text-utils';
import { 
  allWords, 
  availableLengths,
  wordStats,
  letterPatternStats,
  wordEndingStats,
  streakStats,
  milestoneWords
} from '~astro-utils/word-data-utils';
import { t } from '~utils/i18n-utils';

const totalWords = allWords.length;
const firstWord = totalWords > 0 ? allWords[0] : null;
const latestWord = totalWords > 0 ? allWords[allWords.length - 1] : null;
const lengthCount = availableLengths.length;

const letterStats = getLetterStats(wordStats.letterFrequency);

const { mostSyllables, leastSyllables } = getSyllableStats(allWords);
const { mostVowels, mostConsonants } = getLetterTypeStats(allWords);
const { allVowels, allConsonants, palindromes } = getPatternStats(allWords);


const leastSyllablesCount = leastSyllables ? countSyllables(leastSyllables.word) : 0;
const mostSyllablesCount = mostSyllables ? countSyllables(mostSyllables.word) : 0;
const mostCommonLetter = letterStats.length > 0 ? letterStats[0][0] : '';
const mostCommonLetterCount = letterStats.length > 0 ? letterStats[0][1] : 0;
const leastCommonLetter = letterStats.length > 0 ? letterStats[letterStats.length - 1][0] : '';
const leastCommonLetterCount = letterStats.length > 0 ? letterStats[letterStats.length - 1][1] : 0;
const leastCommonLetterPlural = leastCommonLetterCount !== 1 ? 's' : '';
const mostVowelsCount = mostVowels ? getVowelCount(mostVowels.word) : 0;
const mostConsonantsCount = mostConsonants ? getConsonantCount(mostConsonants.word) : 0;
const palindromeCount = palindromes.length;
const streakChartWidth = Math.min(100, (streakStats.currentStreak / Math.max(streakStats.longestStreak, 1)) * 100);
const milestoneCount = milestoneWords.length;

const letterPatternItems = [
  { key: 'startEndSame', label: t('stats.same_start_end'), count: letterPatternStats.startEndSame.length, href: '/stats/same-start-end' },
  { key: 'doubleLetters', label: t('stats.double_letters'), count: letterPatternStats.doubleLetters.length, href: '/stats/double-letters' },
  { key: 'tripleLetters', label: t('stats.triple_letters'), count: letterPatternStats.tripleLetters.length, href: '/stats/triple-letters' },
  { key: 'alphabetical', label: t('stats.alphabetical_order'), count: letterPatternStats.alphabetical.length, href: '/stats/alphabetical-order' },
].filter(item => item.count > 0);

const wordEndingItems = [
  { key: 'ing', label: t('stats.ing_words'), count: wordEndingStats.ing.length, href: '/stats/words-ending-ing' },
  { key: 'ed', label: t('stats.ed_words'), count: wordEndingStats.ed.length, href: '/stats/words-ending-ed' },
  { key: 'ly', label: t('stats.ly_words'), count: wordEndingStats.ly.length, href: '/stats/words-ending-ly' },
  { key: 'ness', label: t('stats.ness_words'), count: wordEndingStats.ness.length, href: '/stats/words-ending-ness' },
  { key: 'ful', label: t('stats.ful_words'), count: wordEndingStats.ful.length, href: '/stats/words-ending-ful' },
  { key: 'less', label: t('stats.less_words'), count: wordEndingStats.less.length, href: '/stats/words-ending-less' },
].filter(item => item.count > 0);

const hasLetterPatterns = letterPatternItems.length > 0;
const hasWordEndings = wordEndingItems.length > 0;

// Build data arrays for DefinitionList
const basicStatsItems = [
  { label: t('stats.total_words'), value: totalWords, href: '/words' },
  ...(lengthCount > 0 ? [{ label: t('stats.word_lengths'), value: lengthCount, href: getWordsLengthUrl() }] : []),
  ...(milestoneCount > 0 ? [{ label: t('stats.milestone_words'), value: milestoneCount, href: '/stats/milestone-words' }] : [])
];

// Basic word items that should render as word links
const basicWordItems = [
  ...(firstWord ? [{ label: t('stats.first_word'), value: firstWord }] : []),
  ...(latestWord ? [{ label: t('stats.latest_word'), value: latestWord }] : [])
];

const streakItems = [
  {
    label: t('stats.current_streak'),
    value: t('stats.days', { count: streakStats.currentStreak }),
    ...(streakStats.currentStreak > 0 ? { href: '/stats/current-streak' } : {})
  },
  {
    label: t('stats.longest_streak'),
    value: t('stats.days', { count: streakStats.longestStreak }),
    ...(streakStats.longestStreak > 0 ? { href: '/stats/longest-streak' } : {})
  }
];

// Word facts items that should render as word links
const wordFactsWordItems = [
  ...(wordStats.shortest ? [{ label: t('stats.shortest', { length: wordStats.shortest.word.length }), value: wordStats.shortest }] : []),
  ...(wordStats.longest ? [{ label: t('stats.longest', { length: wordStats.longest.word.length }), value: wordStats.longest }] : []),
  ...(leastSyllables ? [{ label: t('stats.least_syllables', { count: leastSyllablesCount }), value: leastSyllables }] : []),
  ...(mostSyllables ? [{ label: t('stats.most_syllables', { count: mostSyllablesCount }), value: mostSyllables }] : []),
  ...(mostVowels ? [{ label: t('stats.most_vowels', { count: mostVowelsCount }), value: mostVowels }] : []),
  ...(mostConsonants ? [{ label: t('stats.most_consonants', { count: mostConsonantsCount }), value: mostConsonants }] : [])
];

// Word facts items that should render as regular links/values
const wordFactsRegularItems = [
  ...(letterStats.length > 0 ? [
    { label: t('stats.most_common_letter', { count: mostCommonLetterCount }), value: mostCommonLetter, href: '/stats/most-common-letter' },
    { label: t('stats.least_common_letter', { count: leastCommonLetterCount, plural: leastCommonLetterPlural }), value: leastCommonLetter, href: '/stats/least-common-letter' }
  ] : []),
  ...(palindromeCount > 0 ? [{ label: t('stats.palindromes'), value: palindromeCount, href: '/stats/palindromes' }] : []),
  ...(allConsonants.length > 0 ? [{ label: t('stats.all_consonants'), value: allConsonants.length, href: '/stats/all-consonants' }] : []),
  ...(allVowels.length > 0 ? [{ label: t('stats.all_vowels'), value: allVowels.length, href: '/stats/all-vowels' }] : [])
];

const { title, description, secondaryText } = getPageMetadata(Astro.url.pathname);
---
<Layout title={title} description={description}>
  <main class="stats">
    <Heading text={title} secondaryText={secondaryText} />
    <DescriptionText text={description} />

    <section class="stats__section">
      <DefinitionList items={basicStatsItems} />
      <DefinitionList items={basicWordItems} valueType="word" />
    </section>

    <section class="stats__section">
      <h2 class="stats__heading">{t('stats.word_facts_heading')}</h2>
      <DefinitionList items={wordFactsWordItems} valueType="word" />
      <DefinitionList items={wordFactsRegularItems} />
    </section>

    <section class="stats__section">
      <h2 class="stats__heading">{t('stats.streaks_heading')}</h2>
      <DefinitionList items={streakItems} />
      <dl class="stats__list">
        <dt class="stats__fact">{t('stats.streak_comparison')}</dt>
        <dd class="stats__value stats__streak-chart">
          <div class="streak-chart">
            <div class="streak-chart__bar">
              <div
                class="streak-chart__current"
                style={`--current-width: ${streakChartWidth}%`}
              ></div>
              <div
                class="streak-chart__longest"
                style="--longest-width: 100%"
              ></div>
            </div>
            <div class="streak-chart__labels">
              <span class="streak-chart__label streak-chart__label--current">{t('stats.current', { count: streakStats.currentStreak })}</span>
              <span class="streak-chart__label streak-chart__label--longest">{t('stats.best', { count: streakStats.longestStreak })}</span>
            </div>
          </div>
        </dd>
      </dl>
    </section>

{hasLetterPatterns && (
      <section class="stats__section">
        <h2 class="stats__heading">{t('stats.letter_patterns_heading')}</h2>
        <DefinitionList items={letterPatternItems.map(item => ({
          label: item.label,
          value: item.count,
          href: item.href
        }))} />
      </section>
    )}

{hasWordEndings && (
      <section class="stats__section">
        <h2 class="stats__heading">{t('stats.word_endings_heading')}</h2>
        <DefinitionList items={wordEndingItems.map(item => ({
          label: item.label,
          value: item.count,
          href: item.href
        }))} />
      </section>
    )}
  </main>
</Layout>

<style>
    .stats {
        max-width: var(--content-width-medium);
        margin: 0 auto;
    }

    .stats__section {
        margin-bottom: var(--spacing-large);
    }

    .stats__heading {
        font-size: var(--font-size-base);
        margin-bottom: var(--spacing-base);
        color: var(--color-primary-light);
        border-bottom: 1px solid var(--color-primary-light);
        padding-bottom: 0.5rem;
    }

    .stats__list {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-small);
    }

    .stats__fact {
        color: var(--color-text-light);
        margin: 0;
        padding-top: var(--spacing-small);
    }

    .stats__value {
        font-size: 1.1rem;
        font-weight: 500;
        text-align: right;
        min-width: 0;
        margin: 0;
        padding-bottom: var(--spacing-small);
        border-bottom: 1px solid var(--color-border);
        margin-bottom: var(--spacing-small);
    }

    .stats__link {
        color: var(--color-primary-light);
        text-decoration: none;
        transition: opacity 0.2s ease;
    }

    .stats :global(time) {
        color: var(--color-text-light);
        font-size: 0.8rem;
        font-weight: normal;
        margin: 0;
    }

    /* Streak chart styles */
    .stats__streak-chart {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-small);
        align-items: stretch;
    }

    .streak-chart {
        width: 100%;
    }

    .streak-chart__bar {
        height: 20px;
        background: var(--color-border, #e5e7eb);
        border-radius: 4px;
        position: relative;
        overflow: hidden;
        margin-bottom: var(--spacing-xs);
    }

    .streak-chart__current,
    .streak-chart__longest {
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
        border-radius: 4px;
    }

    .streak-chart__longest {
        background: var(--color-primary-light, #4a7c7d);
        width: var(--longest-width);
        opacity: 0.3;
    }

    .streak-chart__current {
        background: var(--color-primary-light, #4a7c7d);
        width: var(--current-width);
        z-index: 1;
    }

    .streak-chart__labels {
        display: flex;
        justify-content: space-between;
        font-size: var(--font-size-small);
        color: var(--color-text-light);
    }

    .streak-chart__label--current {
        color: var(--color-primary-light, #4a7c7d);
        font-weight: 500;
    }

    @media (min-width: 1025px) {
        .stats__list {
            display: grid;
            grid-template-columns: 1fr auto;
            column-gap: 1rem;
            row-gap: 0;
            align-items: baseline;
        }

        .stats__fact {
            padding-top: 0;
            padding-bottom: var(--spacing-small);
            border-bottom: 1px solid var(--color-border);
        }

        .stats__value {
            padding-top: 0;
            padding-bottom: var(--spacing-small);
            border-bottom: 1px solid var(--color-border);
            margin-bottom: 0;
        }

        .stats__streak-chart {
            grid-column: 1 / -1;
            text-align: left;
        }
    }
</style>
