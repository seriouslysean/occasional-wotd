---
import Heading from '~components/Heading.astro';
import SiteLink from '~components/SiteLink.astro';
import WordLink from '~components/WordLink.astro';
import Layout from '~layouts/Layout.astro';
import { getPageMetadata } from '~utils/page-metadata.ts';
import { countSyllables, getConsonantCount, getVowelCount } from '~utils/text-utils';
import { getAllWords } from '~utils/word-data-utils';
import {
  findWordDate,
  getChronologicalMilestones,
  getCurrentStreakStats,
  getLetterPatternStats,
  getLetterStats,
  getLetterTypeStats,
  getPatternStats,
  getSyllableStats,
  getWordEndingStats,
  getWordStats,
} from '~utils/word-stats-utils';

// Get all words and handle empty case
const words = getAllWords().sort((a, b) => a.date.localeCompare(b.date));
const totalWords = words.length;

// Initialize variables with safe defaults
const firstWord = totalWords > 0 ? words[0] : null;
const latestWord = totalWords > 0 ? words[words.length - 1] : null;

// Get all stats from utility functions
const wordStats = getWordStats(words);
const letterStats = getLetterStats(wordStats.letterFrequency);
const letterPatterns = getLetterPatternStats(words);
const wordEndings = getWordEndingStats(words);
const streakStats = getCurrentStreakStats(words);

// Get specialized stats
const { mostSyllables, leastSyllables } = getSyllableStats(words);
const { mostVowels, mostConsonants } = getLetterTypeStats(words);
const { allVowels, allConsonants, palindromes } = getPatternStats(words);


// Pre-calculate values used in template
const shortestWordDate = wordStats.shortest ? findWordDate(words, wordStats.shortest.word) : null;
const longestWordDate = wordStats.longest ? findWordDate(words, wordStats.longest.word) : null;
const leastSyllablesCount = leastSyllables ? countSyllables(leastSyllables.word) : 0;
const mostSyllablesCount = mostSyllables ? countSyllables(mostSyllables.word) : 0;
const mostCommonLetter = letterStats.length > 0 ? letterStats[0][0] : '';
const mostCommonLetterCount = letterStats.length > 0 ? letterStats[0][1] : 0;
const leastCommonLetter = letterStats.length > 0 ? letterStats[letterStats.length - 1][0] : '';
const leastCommonLetterCount = letterStats.length > 0 ? letterStats[letterStats.length - 1][1] : 0;
const leastCommonLetterPlural = leastCommonLetterCount !== 1 ? 's' : '';
const mostVowelsCount = mostVowels ? getVowelCount(mostVowels.word) : 0;
const mostConsonantsCount = mostConsonants ? getConsonantCount(mostConsonants.word) : 0;
const palindromesText = palindromes.map(w => w.word).join(', ');
const allConsonantsText = allConsonants.map(w => w.word).join(', ');
const allVowelsText = allVowels.map(w => w.word).join(', ');
const streakChartWidth = Math.min(100, (streakStats.currentStreak / Math.max(streakStats.longestStreak, 1)) * 100);
const milestoneCount = getChronologicalMilestones(words).length;

// Prepare data for template loops
const letterPatternItems = [
  { key: 'startEndSame', label: 'same start/end letter', count: letterPatterns.startEndSame.length, href: '/stats/same-start-end' },
  { key: 'doubleLetters', label: 'double letters', count: letterPatterns.doubleLetters.length, href: '/stats/double-letters' },
  { key: 'tripleLetters', label: 'triple letters', count: letterPatterns.tripleLetters.length, href: '/stats/triple-letters' },
  { key: 'alphabetical', label: 'alphabetical order', count: letterPatterns.alphabetical.length, href: '/stats/alphabetical-order' },
].filter(item => item.count > 0);

const wordEndingItems = [
  { key: 'ing', label: '-ing words', count: wordEndings.ing.length, href: '/stats/words-ending-ing' },
  { key: 'ed', label: '-ed words', count: wordEndings.ed.length, href: '/stats/words-ending-ed' },
  { key: 'ly', label: '-ly words', count: wordEndings.ly.length, href: '/stats/words-ending-ly' },
  { key: 'ness', label: '-ness words', count: wordEndings.ness.length, href: '/stats/words-ending-ness' },
  { key: 'ful', label: '-ful words', count: wordEndings.ful.length, href: '/stats/words-ending-ful' },
  { key: 'less', label: '-less words', count: wordEndings.less.length, href: '/stats/words-ending-less' },
].filter(item => item.count > 0);

const hasLetterPatterns = letterPatternItems.length > 0;
const hasWordEndings = wordEndingItems.length > 0;

const { title, description } = getPageMetadata(Astro.url.pathname);
---
<Layout title={title} description={description}>
  <main class="stats">
    <Heading text="Stats" secondaryText="For Nerds" />

    <section class="stats__section">
      <dl class="stats__list">
        <dt class="stats__fact">total words</dt>
        <dd class="stats__value">
          <SiteLink href="/words" class="stats__link">{totalWords}</SiteLink>
        </dd>
        {firstWord && (
          <>
            <dt class="stats__fact">first word</dt>
            <dd class="stats__value">
              <WordLink word={firstWord} />
            </dd>
          </>
        )}
{latestWord && (
  <>
    <dt class="stats__fact">latest word</dt>
    <dd class="stats__value">
      <WordLink word={latestWord} />
    </dd>
  </>
)}
{milestoneCount > 0 && (
  <>
    <dt class="stats__fact">milestone words</dt>
    <dd class="stats__value">
      <SiteLink href="/stats/milestone-words" class="stats__link">{milestoneCount}</SiteLink>
    </dd>
  </>
)}
{/* Most/Least common letter stats */}
      </dl>
    </section>

    <section class="stats__section">
      <h2 class="stats__heading">Word Facts</h2>
      <dl class="stats__list">
        {wordStats.shortest && (
          <>
            <dt class="stats__fact">shortest ({wordStats.shortest.length} letters)</dt>
            <dd class="stats__value">
              <WordLink word={{
                word: wordStats.shortest.word,
                date: shortestWordDate,
              }} />
            </dd>
          </>
        )}
        {wordStats.longest && (
          <>
            <dt class="stats__fact">longest ({wordStats.longest.length} letters)</dt>
            <dd class="stats__value">
              <WordLink word={{
                word: wordStats.longest.word,
                date: longestWordDate,
              }} />
            </dd>
          </>
        )}
        {leastSyllables && (
          <>
            <dt class="stats__fact">least syllables ({leastSyllablesCount})</dt>
            <dd class="stats__value">
              <WordLink word={leastSyllables} />
            </dd>
          </>
        )}
        {mostSyllables && (
          <>
            <dt class="stats__fact">most syllables ({mostSyllablesCount})</dt>
            <dd class="stats__value">
              <WordLink word={mostSyllables} />
            </dd>
          </>
        )}
        {letterStats.length > 0 && (
          <>
            <dt class="stats__fact">most common letter ({mostCommonLetterCount} words)</dt>
            <dd class="stats__value">
              <SiteLink href="/stats/most-common-letter" class="stats__link">{mostCommonLetter}</SiteLink>
            </dd>
          </>
        )}
        {letterStats.length > 0 && (
          <>
            <dt class="stats__fact">least common letter ({leastCommonLetterCount} word{leastCommonLetterPlural})</dt>
            <dd class="stats__value">
              <SiteLink href="/stats/least-common-letter" class="stats__link">{leastCommonLetter}</SiteLink>
            </dd>
          </>
        )}
        {mostVowels && (
          <>
            <dt class="stats__fact">most vowels ({mostVowelsCount})</dt>
            <dd class="stats__value">
              <WordLink word={{
                word: mostVowels.word,
                date: mostVowels.date,
              }} />
            </dd>
          </>
        )}
        {mostConsonants && (
          <>
            <dt class="stats__fact">most consonants ({mostConsonantsCount})</dt>
            <dd class="stats__value">
              <WordLink word={{
                word: mostConsonants.word,
                date: mostConsonants.date,
              }} />
            </dd>
          </>
        )}
        {palindromes.length > 0 && (
          <>
            <dt class="stats__fact">palindromes</dt>
            <dd class="stats__value">
              {palindromesText}
            </dd>
          </>
        )}
        {allConsonants.length > 0 && (
          <>
            <dt class="stats__fact">all consonants</dt>
            <dd class="stats__value">
              {allConsonantsText}
            </dd>
          </>
        )}
        {allVowels.length > 0 && (
          <>
            <dt class="stats__fact">all vowels</dt>
            <dd class="stats__value">
              {allVowelsText}
            </dd>
          </>
        )}
      </dl>
    </section>

    <section class="stats__section">
      <h2 class="stats__heading">Streaks</h2>
      <dl class="stats__list">
        <dt class="stats__fact">current streak</dt>
        <dd class="stats__value">
          {streakStats.currentStreak > 0 ? (
            <SiteLink href="/stats/current-streak" class="stats__link">{streakStats.currentStreak} days</SiteLink>
          ) : (
            `${streakStats.currentStreak} days`
          )}
        </dd>
        <dt class="stats__fact">longest streak</dt>
        <dd class="stats__value">
          {streakStats.longestStreak > 0 ? (
            <SiteLink href="/stats/longest-streak" class="stats__link">{streakStats.longestStreak} days</SiteLink>
          ) : (
            `${streakStats.longestStreak} days`
          )}
        </dd>
        <dt class="stats__fact">streak comparison</dt>
        <dd class="stats__value stats__streak-chart">
          <div class="streak-chart">
            <div class="streak-chart__bar">
              <div
                class="streak-chart__current"
                style={`--current-width: ${streakChartWidth}%`}
              ></div>
              <div
                class="streak-chart__longest"
                style="--longest-width: 100%"
              ></div>
            </div>
            <div class="streak-chart__labels">
              <span class="streak-chart__label streak-chart__label--current">Current: {streakStats.currentStreak}</span>
              <span class="streak-chart__label streak-chart__label--longest">Best: {streakStats.longestStreak}</span>
            </div>
          </div>
        </dd>
      </dl>
    </section>

{hasLetterPatterns && (
      <section class="stats__section">
        <h2 class="stats__heading">Letter Patterns</h2>
        <dl class="stats__list">
          {letterPatternItems.map(item => (
            <>
              <dt class="stats__fact">{item.label}</dt>
              <dd class="stats__value">
                <SiteLink href={item.href} class="stats__link">{item.count}</SiteLink>
              </dd>
            </>
          ))}
        </dl>
      </section>
    )}

{hasWordEndings && (
      <section class="stats__section">
        <h2 class="stats__heading">Word Endings</h2>
        <dl class="stats__list">
          {wordEndingItems.map(item => (
            <>
              <dt class="stats__fact">{item.label}</dt>
              <dd class="stats__value">
                <SiteLink href={item.href} class="stats__link">{item.count}</SiteLink>
              </dd>
            </>
          ))}
        </dl>
      </section>
    )}
  </main>
</Layout>

<style>
    .stats {
        max-width: var(--content-width-medium);
        margin: 0 auto;
    }

    .stats__section {
        margin-bottom: var(--spacing-large);
    }

    .stats__heading {
        font-size: var(--font-size-base);
        margin-bottom: var(--spacing-base);
        color: var(--color-primary-light);
        border-bottom: 1px solid var(--color-primary-light);
        padding-bottom: 0.5rem;
    }

    .stats__list {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-small);
    }

    .stats__fact {
        color: var(--color-text-light);
        margin: 0;
        padding-top: var(--spacing-small);
    }

    .stats__value {
        font-size: 1.1rem;
        font-weight: 500;
        text-align: right;
        min-width: 0;
        margin: 0;
        padding-bottom: var(--spacing-small);
        border-bottom: 1px solid var(--color-border);
        margin-bottom: var(--spacing-small);
    }

    .stats__link {
        color: var(--color-primary-light);
        text-decoration: none;
        transition: opacity 0.2s ease;
    }

    .stats__link:hover {
        opacity: 0.7;
    }

    /* Stats-specific styles */
    /* .stats :global(a) {
        font-size: 1.1rem;
        font-weight: 500;
        display: flex;
        flex-direction: row;
        gap: var(--spacing-small);
        text-align: right;
    } */

    .stats :global(time) {
        color: var(--color-text-lighter);
        font-size: 0.8rem;
        font-weight: normal;
        margin: 0;
    }

    /* Streak chart styles */
    .stats__streak-chart {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-small);
        align-items: stretch;
    }

    .streak-chart {
        width: 100%;
    }

    .streak-chart__bar {
        height: 20px;
        background: var(--color-border, #e5e7eb);
        border-radius: 4px;
        position: relative;
        overflow: hidden;
        margin-bottom: var(--spacing-xs);
    }

    .streak-chart__current,
    .streak-chart__longest {
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
        border-radius: 4px;
    }

    .streak-chart__longest {
        background: var(--color-primary-light, #4a7c7d);
        width: var(--longest-width);
        opacity: 0.3;
    }

    .streak-chart__current {
        background: var(--color-primary-light, #4a7c7d);
        width: var(--current-width);
        z-index: 1;
    }

    .streak-chart__labels {
        display: flex;
        justify-content: space-between;
        font-size: var(--font-size-small);
        color: var(--color-text-light);
    }

    .streak-chart__label--current {
        color: var(--color-primary-light, #4a7c7d);
        font-weight: 500;
    }

    @media (min-width: 1024px) {
        .stats__list {
            display: grid;
            grid-template-columns: 1fr auto;
            column-gap: 1rem;
            row-gap: 0;
            align-items: baseline;
        }

        .stats__fact {
            padding-top: 0;
            padding-bottom: var(--spacing-small);
            border-bottom: 1px solid var(--color-border);
        }

        .stats__value {
            padding-top: 0;
            padding-bottom: var(--spacing-small);
            border-bottom: 1px solid var(--color-border);
            margin-bottom: 0;
        }

        .stats__streak-chart {
            grid-column: 1 / -1;
            text-align: left;
        }
    }
</style>
